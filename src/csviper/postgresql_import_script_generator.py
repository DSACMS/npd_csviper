#!/usr/bin/env python3
"""
PostgreSQL Import Script Generator for CSViper

Generates standalone Python scripts (go.postgresql.py) that can import CSV data
into PostgreSQL databases using the metadata and SQL files from previous stages.
"""

import os
from .base_import_script_generator import BaseImportScriptGenerator


class PostgreSQLImportScriptGenerator(BaseImportScriptGenerator):
    """
    Generates standalone Python import scripts for PostgreSQL CSV data loading.
    """
    
    @staticmethod
    def fromResourceDirToScript(resource_dir, output_dir=None, overwrite_previous=False):
        """
        Generate a go.postgresql.py script from resource directory containing metadata and SQL files.
        
        Args:
            resource_dir (str): Directory containing metadata.json and SQL files
            output_dir (str): Output directory for go.postgresql.py (defaults to resource_dir)
            overwrite_previous (bool): Whether to overwrite existing go.postgresql.py file
            
        Returns:
            str: Path to the generated go.postgresql.py file
            
        Raises:
            FileNotFoundError: If required files are not found
            ValueError: If metadata is invalid
        """
        return BaseImportScriptGenerator.fromResourceDirToScript(
            resource_dir, output_dir, overwrite_previous, 'postgresql', PostgreSQLImportScriptGenerator
        )
    
    @staticmethod
    def _validate_sql_files(resource_dir, metadata):
        """Validate that required PostgreSQL SQL files exist."""
        csv_basename = os.path.splitext(metadata['filename'])[0]
        
        required_files = [
            f"{csv_basename}.create_table_postgres.sql",
            f"{csv_basename}.import_data_postgres.sql"
        ]
        
        missing_files = []
        for filename in required_files:
            filepath = os.path.join(resource_dir, filename)
            if not os.path.exists(filepath):
                missing_files.append(filename)
        
        if missing_files:
            raise FileNotFoundError(f"Missing required PostgreSQL SQL files: {', '.join(missing_files)}")
    
    @staticmethod
    def _generate_script_content(metadata):
        """Generate the content of the go.postgresql.py script."""
        csv_basename = os.path.splitext(metadata['filename'])[0]
        timestamp = BaseImportScriptGenerator._get_timestamp()
        
        script_content = f'''#!/usr/bin/env python3
"""
PostgreSQL CSV Import Script - Generated by CSViper

This script imports CSV data into a PostgreSQL database using pre-generated SQL scripts.

Original CSV: {metadata['filename']}
Generated on: {timestamp}
"""

import os
import sys
import click

# Import the shared functionality from csviper package
try:
    from csviper.import_executor import ImportExecutor
except ImportError:
    # Fallback for standalone scripts - add the parent directory to path
    import sys
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))
    from csviper.import_executor import ImportExecutor


@click.command()
@click.option('--env_file_location', type=click.Path(),
              help='Path to .env file (auto-detected if not specified)')
@click.option('--csv_file', required=True, type=click.Path(),
              help='Path to CSV file to import')
@click.option('--db_schema_name', required=True,
              help='Database schema name (can be set via DB_SCHEMA env var)')
@click.option('--table_name', required=True,
              help='Table name for the imported data (can be set via DB_TABLE env var)')
@click.option('--trample', is_flag=True, default=False,
              help='Overwrite existing table data')
def main(env_file_location, csv_file, db_schema_name, table_name, trample):
    """
    Import CSV data into PostgreSQL database using pre-generated SQL scripts.
    
    This script was generated by CSViper for the CSV file: {metadata['filename']}
    """
    try:
        # Load and validate configuration
        try:
            db_config, db_schema_name, table_name, metadata, encoding = ImportExecutor.load_and_validate_config(
                env_file_location, csv_file, db_schema_name, table_name, '{csv_basename}.metadata.json'
            )
        except ValueError as e:
            if "too many values to unpack" in str(e):
                from csviper.exceptions import ImportExecutionError
                raise ImportExecutionError(
                    "Configuration loading failed due to version mismatch. "
                    "This error typically occurs when the import script expects a different number of return values "
                    "from the configuration loader. Please regenerate the import scripts.",
                    script_type="PostgreSQL",
                    original_error=e
                )
            else:
                raise
        except Exception as e:
            from csviper.exceptions import ImportExecutionError
            raise ImportExecutionError(
                f"Failed to load and validate configuration: {{str(e)}}",
                script_type="PostgreSQL",
                original_error=e
            )
        
        # Validate CSV header with proper encoding
        try:
            expected_columns = metadata['original_column_names']
            ImportExecutor.validate_csv_header(csv_file, expected_columns, encoding)
        except Exception as e:
            from csviper.exceptions import ImportExecutionError
            raise ImportExecutionError(
                f"CSV header validation failed: {{str(e)}}",
                script_type="PostgreSQL",
                original_error=e
            )
        
        # Check debug mode
        debug_mode = db_config.get('DEBUG', '').lower() in ('true', '1', 'yes', 'on')
        if debug_mode:
            click.echo("Debug mode enabled")
        
        click.echo(f"Importing {{os.path.basename(csv_file)}} into PostgreSQL database")
        click.echo(f"Schema: {{db_schema_name}}, Table: {{table_name}}")
        
        if trample:
            click.echo("Warning: --trample flag is set. Existing table data will be overwritten.")
        
        # Execute PostgreSQL import using the shared executor
        ImportExecutor.execute_postgresql_import(
            db_config, db_schema_name, table_name, csv_file, trample, 
            '{csv_basename}.create_table_postgres.sql', encoding
        )
        
        click.echo("âœ“ PostgreSQL import completed successfully!")
        
    except Exception as e:
        from csviper.import_executor import Colors
        click.echo(Colors.dark_red(f"Error: {{e}}"), err=True)
        sys.exit(1)


if __name__ == '__main__':
    main()
'''
        
        return script_content
